{"version":3,"sources":["services/quiz_service.ts","components/Question.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["shuffleArray","array","sort","Math","random","getQuizdata","numQues","level","a","fetch","res","json","results","quiz","map","questionObj","indx","question","answer","correct_answer","option","incorrect_answers","concat","Question","options","callback","console","log","useState","userSelect","setUserSelect","handleState","e","target","value","Fragment","className","onSubmit","eachOption","index","type","name","required","checked","onChange","App","setQuiz","currentQuestion","setCurrentQuestion","increment","setIncrement","result","setResult","useEffect","questions","fetchData","style","textAlign","length","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.666009c7.chunk.js","sourcesContent":["import { Quiz, QuestionType } from './../Types/types';\r\n\r\nconst shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5)\r\n\r\n\r\n\r\nexport default async function getQuizdata(numQues: number, level: string): Promise<QuestionType[]> {\r\n    let res = await fetch(`https://opentdb.com/api.php?amount=${numQues}&difficulty=${level}&type=multiple`)\r\n    let { results } = await res?.json();\r\n    let quiz: QuestionType[] = results?.map((questionObj: Quiz, indx: number) => {\r\n        return {\r\n            question: questionObj?.question,\r\n            answer: questionObj?.correct_answer,\r\n            option: shuffleArray(questionObj?.incorrect_answers.concat(questionObj?.correct_answer)),\r\n        }\r\n    })\r\n    return quiz;\r\n}","import React, { useState } from 'react';\r\nimport { propType } from './../Types/types';\r\n\r\n\r\nconst Question: React.FC<propType> = ({ question, options, callback }) => {\r\n    console.log(\"Comping : \", question);\r\n    console.log(\"Comping : \", options);\r\n    let [userSelect, setUserSelect] = useState();\r\n\r\n    const handleState = (e: any) => {\r\n        setUserSelect(e.target.value);\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"question-container\">\r\n                <div className=\"question\">\r\n                    Question : {question}\r\n                </div>\r\n                <form onSubmit={(e: React.FormEvent<EventTarget>) => callback(e, userSelect)}>\r\n                    {options?.map((eachOption: string, index: number) => {\r\n                        return (\r\n                            <React.Fragment key={index}>\r\n                                <div>\r\n                                    <label>\r\n                                        <input type=\"radio\" name=\"option\" value={eachOption} required checked={userSelect === eachOption} onChange={handleState} />\r\n                                        {eachOption}\r\n                                    </label>\r\n                                </div>\r\n                            </React.Fragment>\r\n                        )\r\n                    })}\r\n                    <br />\r\n                    <input type=\"submit\" />\r\n                </form>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Question;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport getQuizdata from './services/quiz_service';\nimport { QuestionType } from './Types/types';\nimport Question from './components/Question';\n\n\n\nfunction App() {\n\n  const [quiz, setQuiz] = useState<QuestionType[]>([]);\n  let [currentQuestion, setCurrentQuestion] = useState(0);\n  let [increment, setIncrement] = useState(0);\n  let [result, setResult] = useState(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      const questions: QuestionType[] = await getQuizdata(5, 'easy');\n      console.log(questions);\n      setQuiz(questions);\n    }\n    fetchData()\n  }, [])\n\n  console.log(\"How its work\", quiz[currentQuestion]?.answer);\n\n  const handleSubmit = (e: React.FormEvent<EventTarget>, userSelect: any) => {\n    e.preventDefault();\n\n    if (userSelect === quiz[currentQuestion]?.answer) {\n      setIncrement(++increment);\n    }\n    if (currentQuestion !== quiz.length - 1) {\n      setCurrentQuestion(++currentQuestion);\n    }\n    else {\n      setResult(true)\n    }\n  }\n\n  if (result) {\n    return (\n      <React.Fragment>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Correct Answer :{increment}</h1>\n          Total Answer :{quiz.length}\n        </div>\n\n      </React.Fragment>\n\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Question\n        question={quiz[currentQuestion]?.question}\n        options={quiz[currentQuestion]?.option}\n        callback={handleSubmit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}